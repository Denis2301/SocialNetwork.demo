{"version":3,"file":"static/js/541.23ae972b.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","webpack://first-project/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.js","utils/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login_wrapper\":\"Login_login_wrapper__C82Ib\",\"submit_form\":\"Login_submit_form__+bJOz\",\"form_summary_error\":\"Login_form_summary_error__YS56h\"};","import { reduxForm } from \"redux-form\";\r\nimport objStyle from \"../Login/Login.module.css\";\r\nimport { logMe } from \"../../redux/authReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators\";\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(40);\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={objStyle.form}>\r\n            {createField([required, maxLength10], \"E-mail\", \"email\", \"email\", {\r\n                padding: \"7px 5px\",\r\n                width: \"100%\",\r\n            })}\r\n            {createField(\r\n                [required, maxLength10],\r\n                \"Password\",\r\n                \"password\",\r\n                \"password\",\r\n                {\r\n                    padding: \"7px 5px\",\r\n                    width: \"100%\",\r\n                }\r\n            )}\r\n            {createField(\r\n                null,\r\n                null,\r\n                \"checkbox\",\r\n                \"rememberMe\",\r\n                {\r\n                    margin: \"0px auto 10px 3px\",\r\n                },\r\n                \"remember_me\",\r\n                \"Remember Me\"\r\n            )}\r\n            {error && (\r\n                <div className={objStyle.form_summary_error}>{error}</div>\r\n            )}\r\n            {/* {captchaUrl && (\r\n                <div>\r\n                    <Field\r\n                        component={Input}\r\n                        placeholder=\"Enter captcha\"\r\n                        name=\"captcha\"\r\n                        type=\"text\"\r\n                    />\r\n                </div>\r\n            )} */}\r\n            <button className={objStyle.submit_form}>Submit</button>\r\n        </form>\r\n    );\r\n};\r\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\r\nconst Login = ({ isAuth, captchaUrl, logMe }) => {\r\n    let navigate = useNavigate();\r\n    const onSubmit = async (formData, dispatch, { reset }) => {\r\n        await logMe(formData.email, formData.password, formData.rememberMe);\r\n        reset();\r\n    };\r\n    if (isAuth) {\r\n        return navigate(\"/\");\r\n    } else {\r\n        return (\r\n            <div className={objStyle.login_wrapper}>\r\n                <h1 className={objStyle.login__title}>Login</h1>\r\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    error: state.form?.login?._error,\r\n});\r\nexport default connect(mapStateToProps, { logMe })(Login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__GyoW6\"};","import React from \"react\";\r\nimport objStyle from \"./FormsControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\nconst FormControl = ({ meta, element, input, props }) => {\r\n    const { error, touched } = meta;\r\n    const hasError = error && touched;\r\n    return (\r\n        <>\r\n            {React.createElement(element, {\r\n                className: `${objStyle.formNewPost} ${\r\n                    hasError ? objStyle.error : \"\"\r\n                }`,\r\n                ...input,\r\n                ...props,\r\n            })}\r\n            {hasError ? (\r\n                <span\r\n                    style={{\r\n                        color: \"red\",\r\n                        marginRight: \"auto\",\r\n                        marginTop: \"5px\",\r\n                    }}\r\n                >\r\n                    {error}\r\n                </span>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </>\r\n    );\r\n};\r\nexport const Textarea = ({ input, meta, ...props }) => {\r\n    return (\r\n        <>\r\n            <FormControl\r\n                meta={meta}\r\n                input={input}\r\n                element={\"textarea\"}\r\n                props={props}\r\n            />\r\n        </>\r\n    );\r\n};\r\nexport const Input = ({ input, meta, ...props }) => {\r\n    return (\r\n        <>\r\n            <FormControl\r\n                meta={meta}\r\n                input={input}\r\n                props={props}\r\n                element={\"input\"}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const createField = (\r\n    validators,\r\n    placeholder = null,\r\n    type = \"text\",\r\n    name,\r\n    style,\r\n    id = null,\r\n    text = null\r\n) => {\r\n    return (\r\n        <>\r\n            <Field\r\n                validate={validators}\r\n                component={Input}\r\n                placeholder={placeholder}\r\n                type={type}\r\n                name={name}\r\n                style={{ ...style }}\r\n                id={id}\r\n            />\r\n            {type == \"checkbox\" ? text : <label htmlFor={id}>{text}</label>}\r\n        </>\r\n    );\r\n};\r\n","export const required = (value) => {\r\n    return value ? undefined : \"Field is required\";\r\n};\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return value.length <= maxLength\r\n        ? undefined\r\n        : `Max length is ${maxLength} symbols`;\r\n};\r\n"],"names":["maxLength10","maxLengthCreator","LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","captchaUrl","_jsxs","onSubmit","className","objStyle","children","createField","required","padding","width","margin","_jsx","form_summary_error","submit_form","connect","state","_state$form","_state$form$login","auth","isAuth","login","_error","logMe","_ref2","navigate","useNavigate","async","formData","dispatch","_ref3","reset","email","password","rememberMe","login_wrapper","login__title","FormControl","meta","element","input","props","touched","hasError","_Fragment","React","concat","formNewPost","style","color","marginRight","marginTop","Textarea","Input","validators","placeholder","arguments","length","undefined","type","name","id","text","Field","validate","component","htmlFor","value","maxLength"],"sourceRoot":""}